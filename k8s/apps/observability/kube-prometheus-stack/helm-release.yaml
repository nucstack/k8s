---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 10m
  test:
    enable: false
  install:
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  timeout: 20m
  values:
    alertmanager:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: "networking-authelia@kubernetescrd"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          hajimari.io/enable: "true"
          hajimari.io/icon: alert
          hajimari.io/appName: AlertManager
        hosts:
        - "alertmanager.${SECRET_DOMAIN}"
        tls:
        - hosts:
          - "alertmanager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
        interval: 60s
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance
        interval: 60s
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
    kubeScheduler:
      enabled: true
    kubeProxy:
      enabled: true
    kubeEtcd:
      enabled: false
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          hajimari.io/enable: "true"
          hajimari.io/icon: chart-multiple
          hajimari.io/appName: Prometheus
        hosts:
        - "prometheus.${SECRET_DOMAIN}"
        tls:
        - hosts:
          - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        resources: {}
        scrapeInterval: 60s
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              volumeName: prometheus-data
              accessModes: ["ReadWriteOnce"]
              storageClassName: ""
              resources:
                requests:
                  storage: 1Mi
        thanos:
          image: quay.io/thanos/thanos:v0.22.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
