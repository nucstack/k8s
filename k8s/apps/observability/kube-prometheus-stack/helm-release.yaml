---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 10m
  test:
    enable: false
  install:
    timeout: 10m
    remediation:
      retries: 3
  timeout: 20m
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERTMANAGER_SLACK_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "#prometheus-alerts"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "slack"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "slack"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: "networking-authelia@kubernetescrd"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          hajimari.io/enable: "true"
          hajimari.io/icon: alert
          hajimari.io/appName: AlertManager
        hosts:
          - "alertmanager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alertmanager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
        interval: 60s
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
        interval: 60s
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 192.168.9.25
        - 192.168.9.26
        - 192.168.9.27
    kubeScheduler:
      enabled: true
      endpoints:
        - 192.168.9.25
        - 192.168.9.26
        - 192.168.9.27
    kubeProxy:
      enabled: true
      endpoints:
        - 192.168.9.25
        - 192.168.9.26
        - 192.168.9.27
    kubeEtcd:
      enabled: false
      endpoints:
        - 192.168.9.25
        - 192.168.9.26
        - 192.168.9.27
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          hajimari.io/enable: "true"
          hajimari.io/icon: chart-multiple
          hajimari.io/appName: Prometheus
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
      thanosService:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        resources: {}
        scrapeInterval: 60s
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              volumeName: prometheus-data
              accessModes: ["ReadWriteOnce"]
              storageClassName: ""
              resources:
                requests:
                  storage: 1Mi
        thanos:
          image: quay.io/thanos/thanos:v0.22.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        additionalScrapeConfigs:
          # Linkerd
          #  Required for: https://grafana.com/grafana/dashboards/315
          - job_name: 'linkerd-controller'
            kubernetes_sd_configs:
              - role: pod
                namespaces:
                  names:
                    - '{{.Values.linkerdNamespace}}'
                    - '{{.Values.namespace}}'
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_container_port_name
                action: keep
                regex: admin-http
              - source_labels: [__meta_kubernetes_pod_container_name]
                action: replace
                target_label: component
          - job_name: 'linkerd-service-mirror'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
                  - __meta_kubernetes_pod_container_port_name
                action: keep
                regex: linkerd-service-mirror;admin-http$
              - source_labels: [__meta_kubernetes_pod_container_name]
                action: replace
                target_label: component
          - job_name: 'linkerd-proxy'
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_container_name
                  - __meta_kubernetes_pod_container_port_name
                  - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
                action: keep
                regex: ^{{default .Values.proxyContainerName "linkerd-proxy" .Values.proxyContainerName}};linkerd-admin;{{.Values.linkerdNamespace}}$
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              # special case k8s' "job" label, to not interfere with prometheus' "job"
              # label
              # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
              # k8s_job=foo
              - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
                action: replace
                target_label: k8s_job
              # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
              - action: labeldrop
                regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
              # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
              # deployment=foo
              - action: labelmap
                regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
              # drop all labels that we just made copies of in the previous labelmap
              - action: labeldrop
                regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
              # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
              # foo=bar
              - action: labelmap
                regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
              # Copy all pod labels to tmp labels
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
                replacement: __tmp_pod_label_$1
              # Take `linkerd_io_` prefixed labels and copy them without the prefix
              - action: labelmap
                regex: __tmp_pod_label_linkerd_io_(.+)
                replacement: __tmp_pod_label_$1
              # Drop the `linkerd_io_` originals
              - action: labeldrop
                regex: __tmp_pod_label_linkerd_io_(.+)
              # Copy tmp labels into real labels
              - action: labelmap
                regex: __tmp_pod_label_(.+)
