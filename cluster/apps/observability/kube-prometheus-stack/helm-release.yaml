---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 17.1.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 10m
  test:
    enable: false
  install:
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  timeout: 20m
  values:
    alertmanager:
      # config:
      #   global:
      #     slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
      #     resolve_timeout: 5m
      #   receivers:
      #     - name: 'null'
      #     - name: 'discord'
      #       slack_configs:
      #       - channel: '#prometheus'
      #         icon_url: https://avatars3.githubusercontent.com/u/3380462
      #         username: 'Prometheus'
      #         send_resolved: true
      #         title: |-
      #           [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
      #         text: >-
      #           {{ range .Alerts -}}
      #             *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
      #           {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
      #           *Details:*
      #             {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
      #             {{ end }}
      #           {{ end }}
      #     - name: 'webhook'
      #       webhook_configs:
      #       - url: "http://192.168.1.35:9000/hooks/webhook-ups"
      #         send_resolved: false
      #   route:
      #     group_by: ['alertname', 'job']
      #     group_wait: 30s
      #     group_interval: 5m
      #     repeat_interval: 6h
      #     receiver: 'discord'
      #     routes:
      #     - receiver: 'null'
      #       match:
      #         alertname: Watchdog
      #     - receiver: 'discord'
      #       match_re:
      #         # severity: critical|warning
      #         severity: critical
      #       continue: true
      #     - receiver: 'webhook'
      #       match:
      #         alertname: UPS15MinutesRemaining
      #       continue: true
      #   inhibit_rules:
      #     - source_match:
      #         severity: 'critical'
      #       target_match:
      #         severity: 'warning'
      #       equal: ['alertname', 'namespace']
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local/api/verify
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
          nginx.ingress.kubernetes.io/configuration-snippet: proxy_set_header X-Forwarded-Method $request_method;
        hosts:
        - "alertmanager.${SECRET_DOMAIN}"
        tls:
        - hosts:
          - "alertmanager.${SECRET_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        interval: 60s
    grafana:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          kubernetes.io/ingress.allow-http: "false"
        hosts:
        - "grafana.${SECRET_DOMAIN}"
        tls:
        - secretName: grafana-tls
          hosts:
          - "grafana.${SECRET_DOMAIN}"
      fullnameOverride: grafana
      enabled: true
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
      plugins:
      - natel-discrete-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      - btplc-status-dot-panel
      - cloudflare-app
      - grafana-kubernetes-app
      - grafana-clock-panel
      - camptocamp-prometheus-alertmanager-datasource
      - agenty-flowcharting-panel
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          # Core
          cert-manager:
            url: https://gitlab.com/uneeq-oss/cert-manager-mixin/-/raw/master/dashboards/cert-manager.json
            datasource: Prometheus
          nginx-controller:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          nginx-request-handling:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
            datasource: Prometheus
          node-exporter-full:
            url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/grafana/dashboards/node_exporter_full.json
            datasource: Prometheus
          # MetalLB
          metal-lb:
            url: https://grafana.com/api/dashboards/14127/revisions/1/download
            datasource: Prometheus
          # Prometheus
          prometheus-exporter-summary:
            url: https://raw.githubusercontent.com/billimek/k8s-gitops/master/monitoring/grafana/dashboards/prometheus_exporter_summary.json
            datasource: Prometheus
          # Gatekeeper
          monitor-opa-gatekeeper:
            url: https://raw.githubusercontent.com/developer-guy/monitor-opa-gatekeeper/main/monitoring/dashboard.json
            datasource: Prometheus
          # Flux/GOTK
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.7.6/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/v0.7.6/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
          # longhorn
          longhorn:
            url: https://grafana.com/api/dashboards/13032/revisions/6/download
            datasource: Prometheus
          # Unifi
          unifi-poller-client-dpi:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20Client%20DPI%20-%20Prometheus.json
            datasource: Prometheus
          unifi-poller-client-insights:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20Client%20Insights%20-%20Prometheus.json
            datasource: Prometheus
          unifi-poller-network-sites:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20Network%20Sites%20-%20Prometheus.json
            datasource: Prometheus
          unifi-poller-uap-insights:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20UAP%20Insights%20-%20Prometheus.json
            datasource: Prometheus
          unifi-poller-usg-insights:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20USG%20Insights%20-%20Prometheus.json
            datasource: Prometheus
          unifi-poller-usw-insights:
            url: https://raw.githubusercontent.com/unifi-poller/dashboards/master/v2.0.0/UniFi-Poller_%20USW%20Insights%20-%20Prometheus.json
            datasource: Prometheus
      additionalDataSources:
      - name: rtlamr-collect
        type: influxdb
        access: proxy
        database: meters
        user: "${SECRET_INFLUXDB_USER}"
        url: http://influxdb.observability.svc.cluster.local:8086
        jsonData:
          timeInterval: "15s"
        secureJsonData:
          password: "${SECRET_INFLUXDB_PASSWORD}"
      grafana.ini:
        auth.ldap:
          enabled: true
          allow_sign_up: true
          config_file: /etc/grafana/ldap.toml
        security:
          disable_initial_admin_creation: true
        users:
          viewers_can_edit: false
        auth:
          disable_login_form: false
          disable_signout_menu: false
        auth.anonymous:
          enabled: false
          org_role: default
        server:
          root_url: "https://grafana.${SECRET_DOMAIN}"
      ldap:
        enabled: true
        existingSecret: grafana-ldap-config
    kubelet:
      enabled: true
      serviceMonitor:
        interval: 60s
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      prometheusSpec:
        # resources:
        #   requests:
        #     memory: 3Gi
        #     cpu: 100m
        #   limits:
        #     memory: 4Gi
        #     cpu: 200m
        scrapeInterval: 60s
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              volumeName: prometheus-data
              accessModes: ["ReadWriteOnce"]
              storageClassName: ""
              resources:
                requests:
                  storage: 1Mi
