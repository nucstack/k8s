---
version: '3'

env:
  ANSIBLE_CONFIG: "{{.PROJECT_DIR}}/ansible/ansible.cfg"    
  
vars:  
  ANSIBLE_PLAYBOOK_DIR: "{{.ANSIBLE_DIR}}/playbooks"
  ANSIBLE_INVENTORY_DIR: "{{.ANSIBLE_DIR}}/inventory"
  ANSIBLE_PLAYBOOK: "k3s"
  ANSIBLE_HOSTS_FILE: "{{.ANSIBLE_INVENTORY_DIR}}/{{.ENVIRONMENT}}/hosts.yml"
  ANSIBLE_HOSTS:
    sh: "[ ! -f {{.STATE_DIR}}/terraform.tfstate ] || jq -jr '.resources[] | select(((.mode == \"data\") and .type == \"aws_instances\") and .name == \"instances\") | .instances[] | select(.index_key == \"k3s\") | .attributes.private_ips[]' {{.STATE_DIR}}/terraform.tfstate"
    
tasks:
  export-sshkey:
    cmds:
      - "[ -f /root/.ssh/id_rsa ] || mkdir /root/.ssh && echo -e {{.SSH_PRIVATE_KEY}} > /root/.ssh/id_rsa && chmod 0600 /root/.ssh/id_rsa"
    silent: true

  export-kubeconfig:
    vars:
      KUBECONFIG_PATH:
        sh: if [[ "${ANSIBLE_PLAYBOOK}" = "kubespray" ]]; then echo '/etc/kubernetes/admin.conf'; else echo '/etc/rancher/k3s/k3s.yaml'; fi

    deps: [export-sshkey]
    desc: fetch kubeconfig from bootstrap k8s master
    cmds:
      - "[ -f {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig ] || rsync --verbose --progress --partial --rsync-path='sudo rsync' {{.SSH_USER}}@{{.K8S_MASTER_IP}}:{{.KUBECONFIG_PATH}} {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig"
      - sed -i 's/127.0.0.1/{{.K8S_HA_SAN}}/g' {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
      - chmod go-r {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
    silent: true

  init:
    desc: Generate host inventory
    env:
      CONFIG_FILE: "{{.ANSIBLE_HOSTS_FILE}}"
    cmds:
      - mkdir -p {{.ANSIBLE_INVENTORY_DIR}}/{{.ENVIRONMENT}}
      - cp -R {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/inventory/sample/group_vars {{.ANSIBLE_INVENTORY_DIR}}/{{.ENVIRONMENT}}/
      - python3 {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/contrib/inventory_builder/inventory.py {{.ANSIBLE_HOSTS}} {{.ANSIBLE_ADDITIONAL_HOSTS}}
    silent: true

  ping:
    desc: Ping all k8s nodes
    deps: [export-sshkey]
    cmds:
      - "ansible all -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} --one-line -m ping"
    silent: true

  usb:
    desc: Ping all k8s nodes
    deps: [export-sshkey]
    cmds:
      - "ansible all -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} --one-line -a lsusb"

  reboot:
    desc: reboot all k8s nodes
    deps: [export-sshkey]
    cmds:
      - "ansible all -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} --one-line -m reboot"
    silent: true    

  k8s-install:
    desc: Install k8s
    deps: [ping]
    cmds:
      - "ansible-playbook -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/cluster.yml -v -b"
      - task ansible:export-kubeconfig
    silent: true

  k8s-reset:
    desc: Reset k8s
    deps: [ping]
    cmds:
      - "ansible-playbook -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/reset.yml -v -b"
      - rm {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
    silent: true

  k8s-upgrade:
    desc: Upgrade k8s
    deps: [ping]
    cmds:
      - "ansible-playbook -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/upgrade-cluster.yml -v -b"      
    silent: true
