---
version: '3'

env:
  ANSIBLE_CONFIG: "{{.PROJECT_DIR}}/ansible/ansible.cfg"
  KUBECONFIG: "{{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig"

vars:
  ANSIBLE_PLAYBOOK_DIR: "{{.ANSIBLE_DIR}}/playbooks"
  ANSIBLE_INVENTORY_DIR: "{{.ANSIBLE_DIR}}/inventory"
  ANSIBLE_PLAYBOOK: "k3s"
  ANSIBLE_HOSTS_FILE: "{{.ANSIBLE_INVENTORY_DIR}}/{{.ENVIRONMENT}}/hosts.ini"
  ANSIBLE_HOSTS:
    sh: "[ ! -f {{.STATE_DIR}}/terraform.tfstate ] || jq '.resources[] | select((.name == \"k3s_inventory\") and .type == \"template_file\") | .instances[0].attributes.rendered' {{.STATE_DIR}}/terraform.tfstate"

tasks:
  export-ssh-keys:
    desc: fetch cluster ssh keys from terraform state
    cmds:
      - "[ -f {{.SSH_PRIVATE_KEY_PATH}} ] || mkdir -p /home/${LOGNAME}/.ssh && echo -e {{.SSH_PRIVATE_KEY}} > {{.SSH_PRIVATE_KEY_PATH}} && chmod 0600 {{.SSH_PRIVATE_KEY_PATH}}"
      - "[ -f {{.SSH_PUBLIC_KEY_PATH}} ] || mkdir -p /home/${LOGNAME}/.ssh && echo -e {{.SSH_PUBLIC_KEY}} > {{.SSH_PUBLIC_KEY_PATH}} && chmod 0600 {{.SSH_PUBLIC_KEY_PATH}}"
    silent: true

  export-kubeconfig:
    desc: export service account kubeconfig
    deps: [export-ssh-keys]
    vars:
      NAME: ""
      SA_NAME:
        sh: "kubectl -n kube-system get serviceaccount {{.NAME}} -o json | jq -r '.secrets[].name'"
      CA:
        sh: "kubectl -n kube-system get secret {{.SA_NAME}} -o json | jq -r '.data.\"ca.crt\"'"
      TOKEN:
        sh: "kubectl -n kube-system get secret {{.SA_NAME}} -o json | jq -r '.data.token'| base64 -d"
    cmds:
      - "KUBECONFIG_CA={{.CA}} KUBECONFIG_TOKEN={{.TOKEN}}  envsubst < {{.PROJECT_DIR}}/tmpl/kubeconfig.tmpl > {{.PROJECT_DIR}}/{{.NAME}}-{{.ENVIRONMENT}}.kubeconfig"
    silent: true

  export-synology-dns-kubeconfig:
    desc: fetch kubeconfig for synology dns
    deps: [export-ssh-keys]
    cmds:
      - "ansible:export-kubeconfig NAME=synology-dns"
    silent: true

  export-home-dns-kubeconfig:
    desc: fetch kubeconfig for home dns
    deps: [export-ssh-keys]
    cmds:
      - "ansible:export-kubeconfig NAME=home-dns"
    silent: true

  fetch-kubeconfig:
    vars:
      KUBECONFIG_PATH:
        sh: if [[ "${ANSIBLE_PLAYBOOK}" = "kubespray" ]]; then echo '/etc/kubernetes/admin.conf'; else echo '/etc/rancher/k3s/k3s.yaml'; fi
    deps: [export-ssh-keys]
    desc: fetch kubeconfig from bootstrap k8s master
    cmds:
      - "[ -f {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig ] || rsync -e \"ssh -i {{.SSH_PRIVATE_KEY_PATH}}\" --verbose --progress --partial --rsync-path='sudo rsync' {{.SSH_USER}}@192.168.9.25:{{.KUBECONFIG_PATH}} {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig"
      - sed -i 's/127.0.0.1/{{.K3S_HA_SAN}}/g' {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
      - chmod go-r {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
    silent: true

  ping:
    desc: Ping all k8s nodes
    deps: [export-ssh-keys]
    cmds:
      - "ansible all --private-key {{.SSH_PRIVATE_KEY_PATH}} -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} --one-line -m ping -v"
    silent: true

  uptime:
    desc: Uptime of all k8s nodes
    deps: [ping]
    cmds:
      - "ansible all --private-key {{.SSH_PRIVATE_KEY_PATH}} -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} --one-line -a uptime"
    silent: true

  install:
    desc: Install k8s
    deps: [ping]
    cmds:
      - "ansible-playbook --private-key {{.SSH_PRIVATE_KEY_PATH}} -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/cluster.yml -v -b"
    silent: true

  reset:
    desc: Reset k8s
    deps: [ping]
    cmds:
      - "ansible-playbook --private-key {{.SSH_PRIVATE_KEY_PATH}} -i {{.ANSIBLE_HOSTS_FILE}} -u {{.SSH_USER}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.ANSIBLE_PLAYBOOK}}/reset.yml -v -b"
      - rm {{.PROJECT_DIR}}/{{.ENVIRONMENT}}.kubeconfig
    silent: true
